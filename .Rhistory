library("aed4") # for plotting
library("adegenet") # for plotting
library("lubridate")
# Library that conducts sequence alignment
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("msa")
library("msa")
# directories
H5dir <- "~/Documents/Avian_Influenza/Data/Sequences_USDA/DataForH5/data/"
H7dir <- "~/Documents/Avian_Influenza/Data/Sequences_USDA/DataForH7/data/"
new2018dir <- "~/Documents/Avian_Influenza/Data/Sequences_USDA/Data2018/data/"
# metadata
H5meta <- read.csv(paste(H5dir, "H5_List_Sarah.csv", sep = ""))
H7meta <- read.csv(paste(H7dir, "H7_List_Sarah.csv", sep = ""))
new2018meta <- read.csv(paste(new2018dir, "USDA_20180403_Sarah.csv", sep = ""))
colnames(H5meta) <- c("number", "name", "species", "state", "barcode",
"subtype", "sex", "age", "latitude", "longitude", "date_collected")
colnames(H7meta) <- c("number", "name", "species", "state", "barcode",
"subtype", "sex", "age", "latitude", "longitude", "date_collected")
colnames(new2018meta) <- c("number", "name", "species", "state", "barcode",
"subtype", "sex", "age", "latitude", "longitude", "date_collected")
H5meta$type <- NA; H7meta$type <- NA; new2018meta$type <- NA
for (i in 1:length(H5meta[,1])){
H5meta$type[i] <- gsub("[\\(\\)]", "", regmatches(
H5meta$subtype[i], gregexpr("\\(.*?\\)", H5meta$subtype[i]))[[1]])
}
for (i in 1:length(H7meta[,1])){
H7meta$type[i] <- gsub("[\\(\\)]", "", regmatches(
H7meta$subtype[i], gregexpr("\\(.*?\\)", H7meta$subtype[i]))[[1]])
}
for (i in 1:length(new2018meta[,1])){
new2018meta$type[i] <- gsub("[\\(\\)]", "", regmatches(
new2018meta$subtype[i], gregexpr("\\(.*?\\)", new2018meta$subtype[i]))[[1]])
}
H5meta$year <- substr(H5meta$subtype, 1, 4)
H7meta$year <- substr(H7meta$subtype, 1, 4)
new2018meta$year  <- substr(new2018meta$subtype, 1, 4)
make_summary = function(directory, name, data){
nyear <- data.frame(table(data$year)); nyear <- nyear[nyear$Var1 != "", ]
y <- ggplot(data = nyear, aes(x = Var1, y = Freq)) + geom_bar(stat = 'identity') +
theme_bw() + xlab("") + theme(axis.text = element_text(size = 12)) +
coord_flip() + ylab("Number of samples")
ntype <- data.frame(table(data$type))
ntype <- ntype[order(ntype$Freq, decreasing = TRUE), ]
ntype$Var1 <- factor(ntype$Var1, as.character(unique(ntype$Var1)) )
s <- ggplot(data = ntype, aes(x = Var1, y = Freq)) + geom_bar(stat = 'identity') +
theme_bw() + theme(axis.text = element_text(size = 12)) +
xlab("") + coord_flip() + ylab("Number of samples")
png(paste(directory, name, sep = ""), height = 500, width = 800)
multiplot(s, y, cols = 2)  # 700*500
dev.off()
}
make_summary(directory = eval(H5dir), name = "H5_summary.png", data = H5meta)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
for (i in 1:length(H5meta[,1])){
H5meta$type[i] <- gsub("[\\(\\)]", "", regmatches(
H5meta$subtype[i], gregexpr("\\(.*?\\)", H5meta$subtype[i]))[[1]])
}
for (i in 1:length(H7meta[,1])){
H7meta$type[i] <- gsub("[\\(\\)]", "", regmatches(
H7meta$subtype[i], gregexpr("\\(.*?\\)", H7meta$subtype[i]))[[1]])
}
for (i in 1:length(new2018meta[,1])){
new2018meta$type[i] <- gsub("[\\(\\)]", "", regmatches(
new2018meta$subtype[i], gregexpr("\\(.*?\\)", new2018meta$subtype[i]))[[1]])
}
H5meta$year <- substr(H5meta$subtype, 1, 4)
H7meta$year <- substr(H7meta$subtype, 1, 4)
new2018meta$year  <- substr(new2018meta$subtype, 1, 4)
make_summary = function(directory, name, data){
nyear <- data.frame(table(data$year)); nyear <- nyear[nyear$Var1 != "", ]
y <- ggplot(data = nyear, aes(x = Var1, y = Freq)) + geom_bar(stat = 'identity') +
theme_bw() + xlab("") + theme(axis.text = element_text(size = 12)) +
coord_flip() + ylab("Number of samples")
ntype <- data.frame(table(data$type))
ntype <- ntype[order(ntype$Freq, decreasing = TRUE), ]
ntype$Var1 <- factor(ntype$Var1, as.character(unique(ntype$Var1)) )
s <- ggplot(data = ntype, aes(x = Var1, y = Freq)) + geom_bar(stat = 'identity') +
theme_bw() + theme(axis.text = element_text(size = 12)) +
xlab("") + coord_flip() + ylab("Number of samples")
png(paste(directory, name, sep = ""), height = 500, width = 800)
multiplot(s, y, cols = 2)  # 700*500
dev.off()
}
make_summary(directory = eval(H5dir), name = "H5_summary.png", data = H5meta)
rm(list = ls())
# ape is the core package for phylogenetics
# phangorn implements parsimony and likelihood based methods
library("ape")
library("phangorn")
library("phytools")
library("geiger")
library("seqinr")  # to read in fasta files
library("ggplot2")
library("stats") # clustering
library("aed4") # for plotting
library("adegenet") # for plotting
library("lubridate")
# Library that conducts sequence alignment
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("msa")
library("msa")
# directories
H5dir <- "~/Documents/Avian_Influenza/Data/Sequences_USDA/DataForH5/data/"
H7dir <- "~/Documents/Avian_Influenza/Data/Sequences_USDA/DataForH7/data/"
new2018dir <- "~/Documents/Avian_Influenza/Data/Sequences_USDA/Data2018/data/"
# metadata
H5meta <- read.csv(paste(H5dir, "H5_List_Sarah.csv", sep = ""))
H7meta <- read.csv(paste(H7dir, "H7_List_Sarah.csv", sep = ""))
new2018meta <- read.csv(paste(new2018dir, "USDA_20180403_Sarah.csv", sep = ""))
colnames(H5meta) <- c("number", "name", "species", "state", "barcode",
"subtype", "sex", "age", "latitude", "longitude", "date_collected")
colnames(H7meta) <- c("number", "name", "species", "state", "barcode",
"subtype", "sex", "age", "latitude", "longitude", "date_collected")
colnames(new2018meta) <- c("number", "name", "species", "state", "barcode",
"subtype", "sex", "age", "latitude", "longitude", "date_collected")
head(H5meta)
################################################
################################################
make_map = function(directory, name, data){
data$state <- gsub("([a-z])([A-Z])", "\\1 \\2", data$state)
data$state <- tolower(data$state)
temp <- data.frame(table(data$state))
colnames(temp) <- c("stname", "samples")
temp$stname <- as.character(temp$stname)
us <- map_data("state")
base <- ggplot() + geom_map(data = us, map = us,
aes(x = long, y = lat, map_id = region), fill = "#ffffff",
colour = "dark gray", size = 0.15)
mapcol <- base + geom_map(data = subset(temp, stname != "alaska"), map = us,
aes(fill = samples, map_id = stname)) +
scale_fill_continuous(low = "thistle2", high = "darkred",
guide = guide_colorbar(barwidth = 0.5)) +
labs(x = NULL, y = NULL) +
coord_map("albers", lat0 = 39, lat1 = 45) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
legend.title = element_text(size = 8),
legend.position = c(0.9, 0.45))
png(paste(directory, name, sep = ""), height = 400, width = 400)
mapcol + geom_point(data = subset(data, state != "alaska"),
aes(x = longitude, y = latitude), position = "jitter",
col = "black", cex = 0.6)
dev.off()
}
H5meta$type <- NA; H7meta$type <- NA; new2018meta$type <- NA
for (i in 1:length(H5meta[,1])){
H5meta$type[i] <- gsub("[\\(\\)]", "", regmatches(
H5meta$subtype[i], gregexpr("\\(.*?\\)", H5meta$subtype[i]))[[1]])
}
head(H5meta)
table(H5meta$type)
for (i in 1:length(H7meta[,1])){
H7meta$type[i] <- gsub("[\\(\\)]", "", regmatches(
H7meta$subtype[i], gregexpr("\\(.*?\\)", H7meta$subtype[i]))[[1]])
}
for (i in 1:length(new2018meta[,1])){
new2018meta$type[i] <- gsub("[\\(\\)]", "", regmatches(
new2018meta$subtype[i], gregexpr("\\(.*?\\)", new2018meta$subtype[i]))[[1]])
}
H5meta$year <- substr(H5meta$subtype, 1, 4)
H7meta$year <- substr(H7meta$subtype, 1, 4)
new2018meta$year  <- substr(new2018meta$subtype, 1, 4)
table(new2018$type)
table(new2018meta$type)
sum(table(new2018meta$type))
2+31+4+2+2+1+4
head(new2018meta)
length(new2018meta[,1])
new2018meta$type
tail(new2018meta)
new2018meta[158:162]
new2018meta[158:162,]
library("msa")
# directories
H5dir <- "~/Documents/Avian_Influenza/Data/Sequences_USDA/DataForH5/data/"
H7dir <- "~/Documents/Avian_Influenza/Data/Sequences_USDA/DataForH7/data/"
new2018dir <- "~/Documents/Avian_Influenza/Data/Sequences_USDA/Data2018/data/"
# metadata
H5meta <- read.csv(paste(H5dir, "H5_List_Sarah.csv", sep = ""))
H7meta <- read.csv(paste(H7dir, "H7_List_Sarah.csv", sep = ""))
new2018meta <- read.csv(paste(new2018dir, "USDA_20180403_Sarah.csv", sep = ""))
colnames(H5meta) <- c("number", "name", "species", "state", "barcode",
"subtype", "sex", "age", "latitude", "longitude", "date_collected")
colnames(H7meta) <- c("number", "name", "species", "state", "barcode",
"subtype", "sex", "age", "latitude", "longitude", "date_collected")
colnames(new2018meta) <- c("number", "name", "species", "state", "barcode",
"subtype", "sex", "age", "latitude", "longitude", "date_collected")
################################################
################################################
# make state-level maps of sample size!
################################################
################################################
# descriptive table on virus types; birds came from; year
################################################
################################################
H5meta$type <- NA; H7meta$type <- NA; new2018meta$type <- NA
for (i in 1:length(H5meta[,1])){
H5meta$type[i] <- gsub("[\\(\\)]", "", regmatches(
H5meta$subtype[i], gregexpr("\\(.*?\\)", H5meta$subtype[i]))[[1]])
}
H5meta$type
for (i in 1:length(new2018meta[,1])){
new2018meta$type[i] <- gsub("[\\(\\)]", "", regmatches(
new2018meta$subtype[i], gregexpr("\\(.*?\\)", new2018meta$subtype[i]))[[1]])
}
new2018meta$year  <- substr(new2018meta$subtype, 1, 4)
new2018meta$type
table(new2018meta$type)
sum(table(new2018meta$type))
3+47+6+2+2+1+6
head(new2018meta)
summary(new2018meta)
test <- new2018meta[!is.na(new2018meta$latitude),]
sum(table(test$type))
table(test$type)
3+44+6+5+6
3+5+79+2+1+14+2+2
library("adegenet") # for plotting
citation("adegenet")
352.48+644.96
153.77+263.98
153.77+263.98+352.48+644.96
####################################################
#####################################################
#####################################################
rm(list = ls())
library("deSolve")
library("doParallel")
library("foreach")
setwd("~/GitHub/coinfection")
data.dir <- "~/Documents/collaborations/Bree-Carrie-BTBcoinfection_paper/code/24-May-2017 update/R figures/"
# Parameter files (must read fixed first)
source('fixedparams.R', chdir = TRUE)
source('chronicmildparams.R', chdir = TRUE)
# RHS & Summary stats calculations
source('rhs.R', chdir = TRUE)
source('get_summary_stats.R', chdir = TRUE)
bins <- 50  # currently at 12
#####################################################
# Acute Density dependent model, gamma
#####################################################
source('acutemildparams.R', chdir = TRUE)
params <- c(fixedparams, acutemildhightrans)
dfDD <- data.frame(
beta_tu = rep(seq(params$beta_tuL, params$beta_tuU,
length.out = bins), times = bins),
gamma_tu = rep(seq(params$gamma_tuL, params$gamma_tuU,
length.out = bins), each = bins),
type = rep("variable", bins*bins),
RoAT = NA, MaxA = NA, TimeMax = NA, MaxR = NA,
EE_FinalN = NA, EE_R = NA, EE_TB = NA, EE_I = NA,
EE_RinnoTB = NA, EE_RinTB = NA)
dfDD2 <- data.frame(
beta_tu = c(rep(params$beta_tu, bins),
seq(params$beta_tuL, params$beta_tuU,
length.out = bins)),
gamma_tu = c(seq(params$gamma_tuL, params$gamma_tuU,
length.out = bins), rep(params$gamma_tu, bins)),
type = rep("observed", bins*2),
RoAT = NA, MaxA = NA, TimeMax = NA, MaxR = NA,
EE_FinalN = NA, EE_R = NA, EE_TB = NA, EE_I = NA,
EE_RinnoTB = NA, EE_RinTB = NA)
dfDD <- rbind(dfDD, dfDD2)
dfDD$rowid <- seq(1, length(dfDD[,1]), 1)
dfDD <- dfDD[, c(1:3, length(dfDD))]
# start cluster
cl <- makeCluster(6)
registerDoParallel(cl)
DDacute <- foreach (d = iter(dfDD, by = "row"), .combine = rbind,
.packages = "deSolve") %dopar%{
params <- c(fixedparams, chronicmildparams)
params$beta_tu <- d$beta_tu
params$gamma_tu <- d$gamma_tu
rowid <- d$rowid
val <- get_acute_summary_stats_DD(params)
df <- data.frame(rowid = rowid,
RoAT = val[1], MaxA = val[2], TimeMax = val[3], MaxR = val[4],
EE_FinalN = val[5], EE_R = val[6], EE_TB = val[7], EE_I = val[8],
EE_RinnoTB = val[9], EE_RinTB = val[10])
}
stopCluster(cl)
#####################################################
# Acute Density dependent model, gamma
#####################################################
source('acutemildparams.R', chdir = TRUE)
params <- c(fixedparams, acutemildhightrans)
dfDD <- data.frame(
beta_tu = rep(seq(params$beta_tuL, params$beta_tuU,
length.out = bins), times = bins),
gamma_tu = rep(seq(params$gamma_tuL, params$gamma_tuU,
length.out = bins), each = bins),
type = rep("variable", bins*bins),
RoAT = NA, MaxA = NA, TimeMax = NA, MaxR = NA,
EE_FinalN = NA, EE_R = NA, EE_TB = NA, EE_I = NA,
EE_RinnoTB = NA, EE_RinTB = NA)
dfDD2 <- data.frame(
beta_tu = c(rep(params$beta_tu, bins),
seq(params$beta_tuL, params$beta_tuU,
length.out = bins)),
gamma_tu = c(seq(params$gamma_tuL, params$gamma_tuU,
length.out = bins), rep(params$gamma_tu, bins)),
type = rep("observed", bins*2),
RoAT = NA, MaxA = NA, TimeMax = NA, MaxR = NA,
EE_FinalN = NA, EE_R = NA, EE_TB = NA, EE_I = NA,
EE_RinnoTB = NA, EE_RinTB = NA)
dfDD <- rbind(dfDD, dfDD2)
dfDD$rowid <- seq(1, length(dfDD[,1]), 1)
dfDD <- dfDD[, c(1:3, length(dfDD))]
# start cluster
cl <- makeCluster(6)
registerDoParallel(cl)
DDacute <- foreach (d = iter(dfDD, by = "row"), .combine = rbind,
.packages = "deSolve") %dopar%{
params <- c(fixedparams, chronicmildparams)
params$beta_tu <- d$beta_tu
params$gamma_tu <- d$gamma_tu
rowid <- d$rowid
val <- get_acute_summary_stats_DD(params)
df <- data.frame(rowid = rowid,
RoAT = val[1], MaxA = val[2], TimeMax = val[3], MaxR = val[4],
EE_FinalN = val[5], EE_R = val[6], EE_TB = val[7], EE_I = val[8],
EE_RinnoTB = val[9], EE_RinTB = val[10])
}
stopCluster(cl)
dfDDacute <- as.data.frame(cbind(dfDD, DDacute))
dfDDacute$change_beta_tu <- dfDDacute$beta_tu/params$beta_u
dfDDacute$change_gamma_tu <- dfDDacute$gamma_tu/ params$gamma_u
dfDDacute_recov<- dfDDacute
write.csv(dfDDacute_recov,
paste(data.dir, "acute_densitydependent_recov_2019.csv", sep = ""))
rm(params)
summary(dfDDacute_recov)
#####################################################
# Acute Frequency dependent model, mortality
#####################################################
params <- c(fixedparams, acutemildhightransFD)
dfFD <- data.frame(
beta_tu = rep(seq(params$beta_tuL, params$beta_tuU,
length.out = bins), times = bins),
alpha_tu = rep(seq(params$alpha_u, 4*params$alpha_u,
length.out = bins), each = bins),
type = rep("variable", bins*bins),
RoAT = NA, MaxA = NA, TimeMax = NA, MaxR = NA,
EE_FinalN = NA, EE_R = NA, EE_TB = NA, EE_I = NA,
EE_RinnoTB = NA, EE_RinTB = NA)
dfFD2 <- data.frame(
beta_tu = c(rep(params$beta_tu, bins),
seq(params$beta_tuL, params$beta_tuU,
length.out = bins)),
alpha_tu = c(seq(params$alpha_tuL, params$alpha_tuU,
length.out = bins), rep(params$alpha_tu, bins)),
type = rep("observed", bins*2),
RoAT = NA, MaxA = NA, TimeMax = NA, MaxR = NA,
EE_FinalN = NA, EE_R = NA, EE_TB = NA, EE_I = NA,
EE_RinnoTB = NA, EE_RinTB = NA)
dfFD <- rbind(dfFD, dfFD2)
dfFD$rowid <- seq(1, length(dfFD[,1]), 1)
dfFD <- dfFD[, c(1:3, length(dfFD))]
# start cluster
cl <- makeCluster(7)
registerDoParallel(cl)
FDacute <- foreach (d = iter(dfDD, by = "row"), .combine = rbind,
.packages = "deSolve") %dopar%{
params <- c(fixedparams, chronicmildparams)
params$beta_tu <- d$beta_tu
params$alpha_tu <- d$alpha_tu
rowid <- d$rowid
val <- get_acute_summary_stats_FD(params)
df <- data.frame(rowid = rowid,
RoAT = val[1], MaxA = val[2], TimeMax = val[3], MaxR = val[4],
EE_FinalN = val[5], EE_R = val[6], EE_TB = val[7], EE_I = val[8],
EE_RinnoTB = val[9], EE_RinTB = val[10])
}
stopCluster(cl)
dfFDacute <- as.data.frame(cbind(dfFD, FDacute))
dfFDacute$change_beta_tu <- dfFDacute$beta_tu/ params$beta_u
dfFDacute$change_alpha_tu <- dfFDacute$alpha_tu/ params$alpha_u
write.csv(dfFDacute,
paste(data.dir, "acute_frequencydependent_2019.csv", sep = ""))
rm(params)
#####################################################
# Acute Frequency dependent model, recovery
#####################################################
params <- c(fixedparams, acutemildhightransFD)
dfFD <- data.frame(
beta_tu = rep(seq(params$beta_tuL, params$beta_tuU,
length.out = bins), times = bins),
gamma_tu = rep(seq(params$gamma_tuL, params$gamma_tuU,
length.out = bins), each = bins),
type = rep("variable", bins*bins),
RoAT = NA, MaxA = NA, TimeMax = NA, MaxR = NA,
EE_FinalN = NA,
EE_R = NA, EE_TB = NA, EE_I = NA,
EE_RinnoTB = NA, EE_RinTB = NA)
dfFD2 <- data.frame(
beta_tu = c(rep(params$beta_tu, bins),
seq(params$beta_tuL, params$beta_tuU,
length.out = bins)),
gamma_tu = c(seq(params$gamma_tuL, params$gamma_tuU,
length.out = bins),
rep(params$gamma_tu, bins)),
type = rep("observed", bins*2),
RoAT = NA, MaxA = NA, TimeMax = NA, MaxR = NA,
EE_FinalN = NA, EE_R = NA, EE_TB = NA, EE_I = NA,
EE_RinnoTB = NA, EE_RinTB = NA)
dfFD <- rbind(dfFD, dfFD2)
dfFD$rowid <- seq(1, length(dfFD[,1]), 1)
dfFD <- dfFD[, c(1:3, length(dfFD))]
# start cluster
cl <- makeCluster(7)
registerDoParallel(cl)
FDacute <- foreach (d = iter(dfFD, by = "row"), .combine = rbind,
.packages = "deSolve") %dopar%{
params <- c(fixedparams, chronicmildparams)
params$beta_tu <- d$beta_tu
params$gamma_tu <- d$gamma_tu
rowid <- d$rowid
val <- get_acute_summary_stats_FD(params)
df <- data.frame(rowid = rowid,
RoAT = val[1], MaxA = val[2], TimeMax = val[3], MaxR = val[4],
EE_FinalN = val[5], EE_R = val[6], EE_TB = val[7], EE_I = val[8],
EE_RinnoTB = val[9], EE_RinTB = val[10])
}
stopCluster(cl)
dfFDacute <- as.data.frame(cbind(dfFD, FDacute))
dfFDacute$change_beta_tu <- dfFDacute$beta_tu/ params$beta_u
dfFDacute$change_gamma_tu <- dfFDacute$gamma_tu / params$gamma_u
dfFDacute_recov<- dfFDacute
write.csv(dfFDacute_recov,
paste(data.dir, "acute_frequencydependent_recov_2019.csv", sep = ""))
rm(params)
####################################################
# Acute Density dependent model, mortality
#####################################################
params <- c(fixedparams, acutemildhightrans)
dfDD <- data.frame(
beta_tu = rep(seq(params$beta_tuL, params$beta_tuU,
length.out = bins), times = bins),
alpha_tu = rep(seq(params$alpha_u, 4*params$alpha_u,
length.out = bins), each = bins),
type = rep("variable", bins*bins),
RoAT = NA, MaxA = NA, TimeMax = NA, MaxR = NA,
EE_FinalN = NA, EE_R = NA, EE_TB = NA, EE_I = NA,
EE_RinnoTB = NA, EE_RinTB = NA)
dfDD2 <- data.frame(
beta_tu = c(rep(params$beta_tu, bins),
seq(params$beta_tuL, params$beta_tuU,
length.out = bins)),
alpha_tu = c(seq(params$alpha_tuL, params$alpha_tuU,
length.out = bins), rep(params$alpha_tu, bins)),
type = rep("observed", bins*2),
RoAT = NA, MaxA = NA, TimeMax = NA, MaxR = NA,
EE_FinalN = NA, EE_R = NA, EE_TB = NA, EE_I = NA,
EE_RinnoTB = NA, EE_RinTB = NA)
dfDD <- rbind(dfDD, dfDD2)
dfDD$rowid <- seq(1, length(dfDD[,1]), 1)
dfDD <- dfDD[, c(1:3, length(dfDD))]
# start cluster
cl <- makeCluster(7)
registerDoParallel(cl)
DDacute <- foreach (d = iter(dfDD, by = "row"), .combine = rbind,
.packages = "deSolve") %dopar%{
params <- c(fixedparams, chronicmildparams)
params$beta_tu <- d$beta_tu
params$alpha_tu <- d$alpha_tu
rowid <- d$rowid
val <- get_acute_summary_stats_DD(params)
df <- data.frame(rowid = rowid,
RoAT = val[1], MaxA = val[2], TimeMax = val[3], MaxR = val[4],
EE_FinalN = val[5], EE_R = val[6], EE_TB = val[7], EE_I = val[8],
EE_RinnoTB = val[9], EE_RinTB = val[10])
}
stopCluster(cl)
dfDDacute <- as.data.frame(cbind(dfDD, DDacute))
# DeSolve errors
dfDDacute$change_beta_tu <- dfDDacute$beta_tu/params$beta_u
dfDDacute$change_alpha_tu <- dfDDacute$alpha_tu/ params$alpha_u
write.csv(dfDDacute,
paste(data.dir, "acute_densitydependent_2019.csv", sep = ""))
rm(params)
#####################################################
summary(dfDDacute)
